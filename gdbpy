#! /usr/bin/gdb --python
#
# FILE         :  gdbpy
# COPYRIGHT    :  Yakov Markovitch, 2016
# DESCRIPTION  :  Run GDB as a Python interpreter in noninteractive mode
# CREATION DATE:  5 Feb 2016

"""Run GDB as a Python interpreter in noninteractive mode"""

from __future__ import print_function
import os.path, sys, runpy, argparse

if __name__ != "__main__":
    import warnings
    warnings.warn("%s should not be imported as a module, must run as a script" % __name__, ImportWarning)

__all__ = ()

def make_parser():
    parser = optparse.OptionParser(prog=os.path.basename(globals().get("__file__", "gdbpy")),
                                   description = __doc__,
                                   usage="%prog (-m MODULE | -c CMDSTR | FILE) [ARG ...]",
                                   epilog=
                                   "  FILE        python script file\n"
                                   "  ARG ...     arguments passed to a script")

    def store_value(option, opt_str, value, parser):
        if parser.rargs and parser.rargs[0] != "--":
            parser.rargs[:0] = ("--",)
        print("opt_str='%s' rarg=%s" % (opt_str, parser.rargs))
        setattr(parser.values, option.dest, value)

    def addscriptopt(optchar, dest, help):
        parser.add_option(optchar, type="string", dest=dest, action="callback", callback=store_value, help=help)

    addscriptopt('-c', dest='cmdstr', help="python script passed in as a string")
    addscriptopt('-m', dest='module', help="run python library module as a script")

    parser.disable_interspersed_args()
    parser.format_epilog = lambda _: parser.epilog and "\n%s\n" % parser.epilog

    return parser

def run_interpreter():
    opts, args = make_parser().parse_args(sys.argv != [''] and sys.argv or [])
    if opts.cmdstr is not None:
        exec(n.cmd, {}, {})
    elif opts.module is not None:
        runpy.run_module(n.module)
    else:
        assert(n.file)
        runpy.run_path(n.file)

run_interpreter()
