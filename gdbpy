#! /usr/bin/gdb --python
#
# FILE         :  gdbpy
# COPYRIGHT    :  Yakov Markovitch, 2016
# DESCRIPTION  :  Run GDB as a Python interpreter in noninteractive mode
# CREATION DATE:  5 Feb 2016

"""Run GDB as a Python interpreter in noninteractive mode"""

from __future__ import print_function
import os.path, sys, runpy

if __name__ != "__main__":
    import warnings
    warnings.warn("%s should not be imported as a module, must run as a script" % __name__, ImportWarning)

__all__ = ()
__filename = globals().get("__file__", "gdbpy")

def make_parser():
    from optparse import OptionParser
    parser = OptionParser(prog=os.path.basename(__filename),
                          description = __doc__,
                          usage="%prog (-m MODULE | -c CMDSTR | FILE) [ARG ...]",
                          epilog=
                          "  FILE        python script file\n"
                          "  ARG ...     arguments passed to a script")

    def store_value(option, opt_str, value, parser):
        if parser.rargs and parser.rargs[0] != "--":
            parser.rargs[:0] = ("--",)
        setattr(parser.values, option.dest, value)

    def addscriptopt(optchar, dest, help):
        parser.add_option(optchar, type="string", dest=dest, action="callback", callback=store_value, help=help)

    addscriptopt('-c', dest='cmdstr', help="python script passed in as a string")
    addscriptopt('-m', dest='module', help="run python library module as a script")

    parser.disable_interspersed_args()
    parser.format_epilog = lambda _: parser.epilog and "\n%s\n" % parser.epilog

    return parser

def run_interpreter():
    parser = make_parser()
    opts, args = parser.parse_args(sys.argv != [''] and sys.argv or [])
    args[:0] = (__filename,)
    sys.argv = args
    if opts.cmdstr is not None:
        exec(opts.cmdstr)
    elif opts.module is not None:
        runpy.run_module(opts.module, run_name="__main__", alter_sys=True)
    else:
        if (len(sys.argv) < 2):
            parser.error("Nothing to run, neither script nor module specified")
        scriptfile = sys.argv[1]
        del sys.argv[1]
        runpy.run_path(scriptfile)

run_interpreter()
